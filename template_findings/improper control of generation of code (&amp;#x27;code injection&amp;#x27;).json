[{"id": 246, "title": "Improper Control of Generation of Code (&amp;#x27;Code Injection&amp;#x27;)", "damage": 1, "reproducability": 1, "exploitability": 1, "affected_users": 1, "discoverability": 1, "dread_total": 1, "effort": null, "type": "Imported", "overview": "When software allows a user&amp;#x27;s input to contain code syntax, it might be possible for an attacker to craft the code in such a way that it will alter the intended control flow of the software. Such an alteration could lead to arbitrary code execution. Injection problems encompass a wide variety of issues -- all mitigated in very different ways. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities.", "poc": null, "remediation": "::PHASE:Architecture and Design:STRATEGY::EFFECTIVENESS::DESCRIPTION:Refactor your program so that you do not have to dynamically generate code.::PHASE:Architecture and Design:STRATEGY::EFFECTIVENESS::DESCRIPTION:Run your code in a jail or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which code can be executed by your software. Examples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.::PHASE:Implementation:STRATEGY:Input Validation:EFFECTIVENESS::DESCRIPTION:Assume all input is malicious. Use an accept known good input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, boat may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as red or blue. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code&amp;#x27;s environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. To reduce the likelihood of code injection, use stringent whitelists that limit which constructs are allowed. If you are dynamically constructing code that invokes a function, then verifying that the input is alphanumeric might be insufficient. An attacker might still be able to reference a dangerous function that you did not intend to allow, such as system(), exec(), or exit().::PHASE:Testing:STRATEGY::EFFECTIVENESS::DESCRIPTION:Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.::PHASE:Testing:STRATEGY::EFFECTIVENESS::DESCRIPTION:Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software&amp;#x27;s operation may slow down, but it should not become unstable, crash, or generate incorrect results.::PHASE:Operation:STRATEGY:Compilation or Build Hardening:EFFECTIVENESS::DESCRIPTION:Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl&amp;#x27;s -T switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).::PHASE:Operation:STRATEGY:Environment Hardening:EFFECTIVENESS::DESCRIPTION:Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl&amp;#x27;s -T switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).::", "references": null, "approved": true, "risk": 1, "affected_hosts": null, "av": null, "ac": null, "au": null, "c": null, "i": null, "a": null, "e": null, "rl": null, "rc": null, "cdp": null, "td": null, "cr": null, "ir": null, "ar": null, "cvss_base": null, "cvss_impact": null, "cvss_exploitability": null, "cvss_temporal": null, "cvss_environmental": null, "cvss_modified_impact": null, "cvss_total": null, "ease": null, "c2_vs": null, "attack_vector": null, "attack_complexity": null, "privileges_required": null, "user_interaction": null, "scope_cvss": null, "confidentiality": null, "integrity": null, "availability": null, "exploit_maturity": null, "remeditation_level": null, "report_confidence": null, "confidentiality_requirement": null, "integrity_requirement": null, "availability_requirement": null, "mod_attack_vector": null, "mod_attack_complexity": null, "mod_privileges_required": null, "mod_user_interaction": null, "mod_scope": null, "mod_confidentiality": null, "mod_integrity": null, "mod_availability": null, "cvss_base_score": null, "cvss_impact_score": null, "cvss_mod_impact_score": null, "c3_vs": null, "severity": null, "likelihood": null, "severity_rationale": null, "likelihood_rationale": null, "nist_impact": null, "nist_likelihood": null, "nist800_total": null, "impact_val": null, "likelihood_val": null, "nist_rating": null, "language": null}]